4.1
<<<<<<< HEAD
We choose pwrite().
As only one thread can write at a time with write(), it might take long time to queue and the output frames will be in mess.If write() is interrupted by a signal before it writes any data, it returns -1 with errno set to EINTR. 
If write() is interrupted by a signal after it successfully writes some data, it returns the number of bytes written.
pwrite() is like write() but has an offset parameter. Unlike lseek() followed by a write(), multiple threads and processes can, in parallel, safely write to the same file descriptor at different file offsets. The catch is that the output must be a file, not a pipe.

The calculation of IOPS is based on three key factors, which are rotational speed, average latency and average seek time。
The necessary time for I/O is only the transfer time and it ignores the seek time. But seek time is very important for random read and write.

4.2
T1 and T2 are different, which means process L1 run with T1 threads and process L2 run with T2 threads, it might cause different speed between the process, but the same result as T1 = T2?
i_c < i_1, then the process L1 stop at i_c, process_2 start with i_c+1
i_c = i_1 & i_c > i_2, process L1 is finished, and process L2 is part of L1, not necessary to run L2 again
i_c = i_1 & i_1 < i_2, process L1 is finished, and process L2 starts with i_1+1

4.3
=======
write: schreibt fortlaufend die gewünschte anzahl bytes an den zeiger im file descriptor. 
dieser wird immer um die anzahl bytes weitergeschoben und an der neuen stelle geschrieben
pwrite: hier wird zusätzlich ein offset angegeben, wodurch es möglich ist mit mehreren threads
in die gleiche datei zu schreiben

Für das Schreiben haben wir uns für pwrite entschieden, damit wir mit den Threads gleichzeitig 
schreiben können, was so mit dem normalen write nicht möglich wäre

Unsere Berechnung messen wir einmal, wenn der erste Thread anfängt zu schreiben (erster zeitlich gemeint). 
Das wird durch #pragma omp single nowait realisiert. 
Nach der omp Barrier schreiben wir nochmal, Diesmal ohne "nowait", damit alle Threads die nächste
Iteration zeitgleich anfangen.

4.2.

Wir haben die Fehler wie folgt behandelt.
1. Ungleiche Threadzahl: Zur Zeit geben wir nur aus, dass es nicht die gleiche Threadzahl war, da es
für dieses Programm noch keine Rolle spielt. Sollte in einem späteren Programm sich dadurch die Berechnung
ändern, werden wir das genauer betrachten.
Für die anderen Fälle haben wir nicht groß eine Fehlerbetrachtung gemacht, da wir es uns so dachten:
Durch atomares Schreiben haben wir immer einen konsistensten Zustand unserer Daten. Wenn I_2 angegeben wird,
ist das eine zusätzliche Anzahl an Berechnungen die durchgeführt werden soll, um zB die Genauigkeit zu erhöhen.
Daher rechnen wir immer vom letzten geschriebenen Chechpoint I_c bis I_1 + I_2.

4.3.
Wir haben die atomaren Checkpoints folgendermaßen realisiert:
Wir schreiben an zwei verschiedene positionen in die Datei:
Einmal gnaz normal nach dem Header und einen zweiten Block nach dem ersten, so dass alle ungeraden Iterationen
in den ersten Block und alle geraden Iterationen in den zweiten Block geschrieben werden. Über den Header kann dann geprüft werden, wo gelesen werden muss. Der Header wird erst aktualisiert, nachdem alle Daten geschrieben wurden.
Diese Methode benötigt dadurch natürlich annähernd doppelten Speicherplatz, was bei PB zu Problemen führen könnte.
Eine andere Möglichkeit wäre vielleicht den Speicher im gesamten in die Datei zu mappen, sobald geschrieben wurde?
>>>>>>> master
